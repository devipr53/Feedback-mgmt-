/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fms.Api;

import com.fms.Entity.UserInfo;
import com.fms.Model.UserCredentails;
import com.fms.Repository.DashboardInformation;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-24T12:20:46.638+05:30[Asia/Calcutta]")
@Api(value = "login", description = "the login API")
public interface LoginApi {

	Logger log = LoggerFactory.getLogger(LoginApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "Logs user into the system", nickname = "loginUser", notes = "", response = UserCredentails.class, responseContainer = "List")
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "successful operation", response = UserCredentails.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Invalid username/password supplied") })
	@RequestMapping(value = "/login", produces = { "application/json" }, method = RequestMethod.POST)
	default Mono<ResponseEntity<UserInfo>> loginUser(
			@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "emailAddress", required = true) String email,
			@NotNull @ApiParam(value = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {

					return Mono.just(new ResponseEntity<UserInfo>(HttpStatus.INTERNAL_SERVER_ERROR));

					// return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n
					// \"businessUnit\" : \"businessUnit\",\r\n \"tokenID\" : \"tokenID\",\r\n
					// \"userRole\" : \"userRole\",\r\n \"userID\" : \"userID\"\r\n}, {\r\n
					// \"businessUnit\" : \"businessUnit\",\r\n \"tokenID\" : \"tokenID\",\r\n
					// \"userRole\" : \"userRole\",\r\n \"userID\" : \"userID\"\r\n} ]",
					// List.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (Exception e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Mono.just(new ResponseEntity<UserInfo>(HttpStatus.INTERNAL_SERVER_ERROR));


				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default LoginApi interface so no example is generated");
		}
		return Mono.just(new ResponseEntity<UserInfo>(HttpStatus.NOT_IMPLEMENTED));


	}

}
